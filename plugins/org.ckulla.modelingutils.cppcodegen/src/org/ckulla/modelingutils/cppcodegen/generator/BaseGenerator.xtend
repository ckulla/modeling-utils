package org.ckulla.modelingutils.cppcodegen.generator

import com.google.inject.Inject
import java.util.List
import org.ckulla.modelingutils.cppcodegen.cpp.AbstractType
import org.ckulla.modelingutils.cppcodegen.cpp.ClassElement
import org.ckulla.modelingutils.cppcodegen.cpp.Clazz
import org.ckulla.modelingutils.cppcodegen.cpp.EPrimitiveType
import org.ckulla.modelingutils.cppcodegen.cpp.Enumeration
import org.ckulla.modelingutils.cppcodegen.cpp.NamedType
import org.ckulla.modelingutils.cppcodegen.cpp.Parameter
import org.ckulla.modelingutils.cppcodegen.cpp.PrimitiveType
import org.ckulla.modelingutils.cppcodegen.cpp.TemplateType
import org.ckulla.modelingutils.cppcodegen.cpp.ReferenceType
import org.ckulla.modelingutils.cppcodegen.cpp.PointerType
import org.ckulla.modelingutils.cppcodegen.cpp.ConstType
import org.ckulla.modelingutils.cppcodegen.cpp.Namespace
import org.ckulla.modelingutils.cppcodegen.cpp.Field
import org.ckulla.modelingutils.cppcodegen.cpp.ArrayType
import org.ckulla.modelingutils.cppcodegen.cpp.DelegatingType
import org.ckulla.modelingutils.cppcodegen.cpp.File

class BaseGenerator {
	
	@Inject IncludeManager includeManager
	
	@Inject CommentBeautifier commentBeautifier
	
	def fileHeader(File f) '''
		// Beginning of «f.name»
		
		// This file is generated by the C++ Model code generator.
		
		// Do not change the contents of this file!
		// Any changes will be discarded on the next generator execution.
		
	'''	
	
	def fileFooter (File f) '''
		
		// End of «f.name»
	'''
	
	def dispatch expandType (ReferenceType tr) '''«tr.type.expandType()»&'''

	def dispatch expandType (ConstType tr) '''const «tr.type.expandType()»'''

	def dispatch expandType (PointerType pt) '''«pt.type.expandType()»*'''
		
	def dispatch expandType (ArrayType at) '''«at.type.expandType()»'''

	def dispatch expandType (AbstractType t) {
		includeManager.add (t)
		t.FQN
	}
	
	def dispatch expandType (Enumeration e) {
		includeManager.add (e)
		'''«IF e.clazz != null»«e.clazz.FQN»::«ENDIF»«e.name»'''
	}

	def dispatch expandType (TemplateType t) 
		'''«expandType(t.type)»<«FOR a:t.arguments SEPARATOR ", "»«a.expandType»«ENDFOR»>'''
	
	def dispatch expandTypePostfix (AbstractType t) {
		
	}

	def dispatch expandTypePostfix (DelegatingType t) {
		expandTypePostfix (t.type)
	}
	
	def dispatch expandTypePostfix (ArrayType t)
		'''«expandTypePostfix (t.type)»[«t.size»]'''
	
	def expandParameters (List<Parameter> parameters) 
		'''«FOR p:parameters SEPARATOR ", "»«p.expand()»«ENDFOR»'''
	
	def expand (Parameter p) '''«p.type.expandType» «p.name»«p.type.expandTypePostfix»'''
	
	def expandStrings (List<String> lines) '''
		«FOR l:lines»
		«l»
		«ENDFOR»
	'''	

	def dispatch String FQN (PrimitiveType pt) {
		pt.name
	}

	def dispatch String FQN (NamedType nt) {
		nt.name
	}

	def dispatch String FQN (Namespace namespace) {
		if (namespace.parent != null) 
			namespace.parent.FQN + "::" + namespace.name
		else
			namespace.name
	}
	
	def dispatch String FQN (Clazz c) {
		var prefix = "";
		if (c.namespace != null)
			prefix = c.namespace.FQN + "::"
		if (c.clazz != null)
			prefix = prefix + c.clazz.FQN + "::"
		prefix + c.name
	}
	
	def String name (PrimitiveType pt) {
		switch (pt.primitiveType) {
			case EPrimitiveType::BOOL: "bool"
			case EPrimitiveType::CHAR: "char"
			case EPrimitiveType::SIGNED_CHAR: "signed char"
			case EPrimitiveType::UNSIGNED_CHAR: "unsigned char"
			case EPrimitiveType::SHORT: "short"
			case EPrimitiveType::UNSIGNED_SHORT: "unsigned short"
			case EPrimitiveType::INT: "int"
			case EPrimitiveType::UNSIGNED_INT: "unsigned int"
			case EPrimitiveType::LONG: "long"
			case EPrimitiveType::UNSIGNED_LONG: "unsigned long"
			case EPrimitiveType::WCHAR_T: "wchar_t"
			case EPrimitiveType::FLOAT: "float"
			case EPrimitiveType::DOUBLE: "double"
			case EPrimitiveType::LONG_DOUBLE: "long double"
			case EPrimitiveType::LONG_LONG: "long long"
			case EPrimitiveType::UNSIGNED_LONG_LONG: "unsigned long long"
			case EPrimitiveType::VOID: "void"
		}
	}
	
	def expand (IncludeManager includeManager) {
		if (includeManager.includes.size>0)
			'''«FOR i:includeManager.includes»#include «i»
			«ENDFOR»
			'''
	}
	
	def expandComment (ClassElement ce) {
		expandComment (ce.comment)
	}
	
	def expandComment (String s) {
		commentBeautifier.toMultinLineComment(s)
	}
	
	def getIncludeManager () {
		includeManager
	}
	
	def fields (Clazz c) {
		c.elements.filter(typeof(Field))
	}
}