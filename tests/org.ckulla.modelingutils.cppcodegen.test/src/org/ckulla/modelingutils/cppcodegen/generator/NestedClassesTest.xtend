package org.ckulla.modelingutils.cppcodegen.generator

import com.google.inject.Inject
import org.ckulla.modelingutils.cppcodegen.builder.CppBuilder
import org.junit.Test
import org.junit.contrib.emf.EmfRegistryRule
import org.junit.contrib.guice.GuiceRule
import org.junit.contrib.rules.Rules
import org.junit.contrib.rules.RulesTestRunner
import org.junit.runner.RunWith

import static junit.framework.Assert.*

@RunWith(typeof(RulesTestRunner))
@Rules({ typeof(EmfRegistryRule), typeof(GuiceRule) })
class NestedClassesTest {

	@Inject Generator generator

	@Inject extension CppBuilder

	@Test
	def void test () {
		val model = cppModel [
			it.clazz [
				name = "OuterClass"
				constructor [ 
					comment = 
						"This is the outer class."
				]
				it.clazz [
					name = "InnerClass"
					constructor [ 
						comment = 
						"This is the inner class."
					]
				]
			]
		]
		
		assertEquals (expectedHeader(), generator.generate (model.files.get(0)).toString());
		assertEquals (expectedSource(), generator.generate (model.files.get(1)).toString());		
	}
	
	def expectedHeader() {
		'''
		#ifndef OUTERCLASS_HPP_
		#define OUTERCLASS_HPP_
		
		// Beginning of OuterClass.hpp
		
		// This file is generated by the C++ Model code generator.
		
		// Do not change the contents of this file!
		// Any changes will be discarded on the next generator execution.
		
		
		class OuterClass {
		
		public:
		
			/**
			 * This is the outer class.
			 */
			OuterClass ();
		
			
			class InnerClass {
			
			public:
			
				/**
				 * This is the inner class.
				 */
				InnerClass ();
			
			};
		
		};
		
		// End of OuterClass.hpp
		
		#endif // OUTERCLASS_HPP_
		'''.toString()	
	}
	
	def expectedSource() {
		'''
		// Beginning of OuterClass.cpp
		
		// This file is generated by the C++ Model code generator.
		
		// Do not change the contents of this file!
		// Any changes will be discarded on the next generator execution.
		
		#include "OuterClass.hpp"
		
		/**
		 * This is the outer class.
		 */
		// public
		OuterClass::OuterClass ()
		{
		}
		
		/**
		 * This is the inner class.
		 */
		// public
		OuterClass::InnerClass::InnerClass ()
		{
		}
		
		// End of OuterClass.cpp
		'''.toString()
	}
	
}